{"version":3,"file":"a-input.js","sourceRoot":"","sources":["../../../src/components/a-input/a-input.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE7C,MAAM,OAAO,MAAO,SAAQ,UAAU;IAAtC;;QAC8B,gBAAW,GAAG,EAAE,CAAC;QACjB,UAAK,GAAG,EAAE,CAAC;IAuDzC,CAAC;IA7BU,MAAM;QACb,OAAO,IAAI,CAAA;;;;gBAIC,IAAI,CAAC,KAAK;sBACJ,IAAI,CAAC,WAAW;iBACrB,CAAC,CAAQ,EAAE,EAAE,CACpB,CAAC,IAAI,CAAC,KAAK,GAAI,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC;;;KAGxD,CAAC;IACJ,CAAC;IAEQ,YAAY;QACnB,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,WAAW;QACT,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE3C,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACzB,IAAI,KAAK,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC;gBAClC,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACxC,CAAC;iBAAM,IAAI,KAAK,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC;gBACzC,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACxC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;;AApDe,aAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;GAsB3B,AAtBqB,CAsBpB;AAzB0B;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;2CAAkB;AACjB;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;qCAAY;AAyDzC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC","sourcesContent":["import { LitElement, html, css } from \"lit\";\nimport { property } from \"lit/decorators.js\";\n\nexport class AInput extends LitElement {\n  @property({ type: String }) placeholder = \"\";\n  @property({ type: String }) value = \"\";\n\n  static override styles = css`\n    :host {\n      display: flex;\n      align-items: center;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      padding: 4px;\n      gap: 4px;\n    }\n\n    ::slotted([aPrefix]),\n    ::slotted([aSuffix]) {\n      display: flex;\n      align-items: center;\n    }\n\n    input {\n      border: none;\n      outline: none;\n      flex: 1;\n      font-size: 16px;\n    }\n  `;\n\n  override render() {\n    return html`\n      <slot name=\"aPrefix\"></slot>\n      <input\n        type=\"text\"\n        value=${this.value}\n        placeholder=${this.placeholder}\n        @input=${(e: Event) =>\n          (this.value = (e.target as HTMLInputElement).value)}\n      />\n      <slot name=\"aSuffix\"></slot>\n    `;\n  }\n\n  override firstUpdated() {\n    this.updateSlots();\n  }\n\n  updateSlots() {\n    const children = Array.from(this.children);\n\n    children.forEach((child) => {\n      if (child.hasAttribute(\"aPrefix\")) {\n        child.setAttribute(\"slot\", \"aPrefix\");\n      } else if (child.hasAttribute(\"aSuffix\")) {\n        child.setAttribute(\"slot\", \"aSuffix\");\n      }\n    });\n  }\n}\n\ncustomElements.define(\"a-input\", AInput);\n"]}